{"version":3,"sources":["component/Consent.js","pages/Consent.js","component/Login.js","pages/Login.js","component/Select.js","pages/Select.js","component/Success.js","pages/Success.js","App.js","serviceWorker.js","index.js"],"names":["liff","window","Consent","handleLogin","props","history","push","mainFunc","a","init","liffId","isLoggedIn","console","log","getEnvironment","getUserProfile","login","getOS","getLanguage","getVersion","getAccessToken","getProfile","userId","displayName","this","style","display","justifyContent","border","onClick","type","Component","withRouter","PConsent","Login","handleSelect","placeholder","PLogin","Select","state","value","onChange","e","target","setState","handleSuccess","radioStyle","height","lineHeight","Group","PSelect","Success","handleBack","PSuccess","App","className","basename","exact","path","component","PageConsent","PageLogin","PageSelect","PageSuccess","Boolean","location","hostname","match","AppWithRouter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b94c73b7.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Card, Checkbox, Button } from 'antd';\nimport { withRouter } from \"react-router-dom\";\nconst liff = window.liff;\nexport class Consent extends Component {\n\n    handleLogin = () => {\n        this.props.history.push(\"/login\")\n    }\n\n    mainFunc = async () => {\n        await liff.init({ liffId: \"1567210612-2vnmZpqo\" })\n        // document.getElementById(\"isLoggedIn\").append(liff.isLoggedIn())\n        if (liff.isLoggedIn) {\n            console.log(\"login success\")\n            this.getEnvironment()\n            this.getUserProfile()\n        } else {\n            liff.login()\n            console.log(\"login unsuccess\")\n        }\n    }\n\n    getEnvironment = () => {\n        console.log(\"OS: \"+liff.getOS())\n        console.log(\"Language: \"+liff.getLanguage())\n        console.log(\"Version: \"+liff.getVersion())\n        console.log(\"AccessToken: \"+liff.getAccessToken())\n    }\n\n    getUserProfile = () => {\n        console.log(\"UserID: \"+liff.getProfile.userId)\n        console.log(\"UserDisplayName: \"+liff.getProfile.displayName)\n        // console.log(\"UserEmail: \"+liff.getDecodedIDToken().email)\n    }\n\n    componentDidMount() {\n        this.mainFunc()\n    }\n    \n    render() {\n        return (\n            <div>\n                <p style={{display:'flex', justifyContent:'center'}}>ข้อกำหนดและเงื่อนไขในการใช้งาน</p>\n            <div>\n                <Card style={{ border: '1px solid black', display:'flex', justifyContent:'center' }}>\n                    <p>1. คำนิยาม\n\n\nคำและข้อความต่อไปนี้จะมีความหมายตามที่กำหนดไว้ด้านล่างนี้เมื่อมีการใช้ในข้อกำหนดและเงื่อนไขฯ<br />\n1.1 \"เนื้อหา\" หมายถึง ข้อมูล เช่น ข้อความ ไฟล์เสียง เพลง รูปภาพ วิดีโอ ซอฟต์แวร์ โปรแกรม รหัสคอมพิวเตอร์ และสิ่งอื่นๆ ที่คล้ายคลึงกัน<br />\n1.2 \"เนื้อหาฯ\" หมายถึง เนื้อหาที่สามารถเข้าถึงได้ผ่านทางบริการฯ<br />\n1.3 \"เนื้อหาจากผู้ใช้\" หมายถึง เนื้อหาที่ผู้ใช้ได้ส่ง ส่งผ่าน หรือ อัพโหลด<br />\n1.4 \"เหรียญ\" หมายถึง สกุลเงินเสมือนจริงซึ่งผู้ใช้สามารถใช้เพื่อชำระเงินสำหรับเนื้อหาและบริการต่างๆ ที่บริษัทฯ เสนอ ซึ่งมีค่าบริการ<br />\n1.5 \"ข้อกำหนดและเงื่อนไขฯ เพิ่มเติม\" หมายถึง เอกสารที่บริษัทฯ ออกหรืออัพโหลดซึ่งเกี่ยวกับบริการฯ ภายใต้ชื่อ \"ข้อตกลง\" \"แนวทางปฏิบัติ\" \"นโยบาย\" และอื่นๆ ในทำนองเดียวกัน<br /></p>\n                    <p>2. การตกลงยอมรับข้อกำหนดและเงื่อนไขฯ\n\n\n2.1 ผู้ใช้ทุกรายจะต้องใช้บริการฯ ตามข้อกำหนดที่ระบุไว้ในข้อกำหนดและเงื่อนไขฯ ผู้ใช้จะไม่สามารถใช้บริการฯ ได้เว้นเสียแต่ว่า ผู้ใช้ได้ตกลงยอมรับข้อกำหนดและเงื่อนไขฯ การตกลงยอมรับดังกล่าวมีผลสมบูรณ์และเพิกถอนมิได้<br />\n2.2 ผู้เยาว์สามารถใช้บริการฯ ได้ต่อเมื่อได้รับความยินยอมจากบิดามารดาหรือผู้ปกครองตามกฎหมายเท่านั้น นอกจากนี้ หากผู้ใช้ใช้บริการฯ แทน หรือ เพื่อวัตถุประสงค์ขององค์กรธุรกิจใดๆ จะถือว่า องค์กรธุรกิจดังกล่าวได้ตกลงยอมรับข้อกำหนดและเงื่อนไขฯ นี้ด้วยแล้ว การตกลงยอมรับดังกล่าวมีผลสมบูรณ์และเพิกถอนมิได้<br />\n2.3 การที่ผู้ใช้ใช้บริการฯ ถือว่า ผู้ใช้ได้ตกลงยอมรับข้อกำหนดและเงื่อนไขฯ การตกลงยอมรับดังกล่าวมีผลสมบูรณ์และเพิกถอนมิได้<br />\n2.4 หากมีข้อกำหนดและเงื่อนไขฯ เพิ่มเติมสำหรับบริการฯ ผู้ใช้จะต้องปฏิบัติตามข้อกำหนดและเงื่อนไขฯ เพิ่มเติมนั้นด้วยเช่นเดียวกับข้อกำหนดและเงื่อนไขฯ นี้<br /></p>\n                    <p>3. การแก้ไขข้อกำหนดและเงื่อนไขฯ\n\n\nบริษัทฯ อาจแก้ไขข้อกำหนดและเงื่อนไขฯ หรือ ข้อกำหนดและเงื่อนไขฯ เพิ่มเติม เมื่อบริษัทฯ เห็นว่ามีความจำเป็น โดยไม่ต้องให้คำบอกกล่าวล่วงหน้าแก่ผู้ใช้ การแก้ไขจะมีผลบังคับเมื่อมีการประกาศข้อกำหนดและเงื่อนไขฯ ที่แก้ไข หรือข้อกำหนดและเงื่อนไขฯ เพิ่มเติมที่แก้ไขไว้ในสถานที่ที่เหมาะสมภายในเว็บไซต์ที่บริษัทฯ เป็นผู้ดำเนินงาน การที่ผู้ใช้ใช้บริการฯ ต่อไป ถือว่าผู้ใช้ได้ให้การยอมรับที่มีผลสมบูรณ์และเพิกถอนมิได้ต่อข้อกำหนดและเงื่อนไขฯ ที่แก้ไขแล้ว หรือข้อกำหนดและเงื่อนไขฯ เพิ่มเติมที่แก้ไขแล้ว ผู้ใช้ควรตรวจสอบข้อกำหนดและเงื่อนไขฯ เป็นประจำระหว่างการใช้บริการฯ เนื่องจากอาจไม่มีการแจ้งเตือนแยกต่างหากเกี่ยวกับการแก้ไขข้อกำหนดและเงื่อนไขฯ ดังกล่าว</p>\n                    \n                    <div style={{display:'flex', justifyContent:'space-between'}}>\n                        <Checkbox >ยอมรับข้อตกลงเเละเงื่อนไข</Checkbox>\n                        <Button onClick={this.handleLogin} type=\"primary\">ยืนยัน</Button>\n                    </div>\n                </Card>\n            </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Consent)\n","import React, { Component } from 'react'\nimport Consent from '../component/Consent'\n\nexport class PConsent extends Component {\n\n    \n\n    render() {\n        return (\n            <div>\n                <Consent />\n            </div>\n        )\n    }\n}\n\nexport default PConsent\n","import React, { Component } from 'react'\nimport { Card, Button, Input } from 'antd';\nimport { withRouter } from \"react-router-dom\";\n\nexport class Login extends Component {\n    handleSelect = () => {\n        this.props.history.push(\"/select\")\n    }\n    render() {\n        return (\n            <div>\n                <p style={{display:'flex', justifyContent:'center'}}>ลงทะเบียน</p>\n                <Card style={{ border: '1px solid red', display:'flex', justifyContent:'center' }}>\n                    <p>เลขประจำตัวประชาชน</p>\n                    <Input placeholder=\"กรุณากรอกเลขประจำตัวประชาชน\" />\n                    <p>เบอร์โทรศัพท์</p>\n                    <Input placeholder=\"0xxxxxxxxx\" />\n                    <div style={{display:'flex', justifyContent:'center'}}>\n                        <Button onClick={this.handleSelect} type=\"primary\">ยืนยัน</Button>\n                    </div>\n                </Card>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Login)\n","import React, { Component } from 'react'\nimport Login from '../component/Login'\n\nexport class PLogin extends Component {\n    render() {\n        return (\n            <div>\n                <Login />\n            </div>\n        )\n    }\n}\n\nexport default PLogin\n","import React, { Component } from 'react'\nimport { Card, Radio, Button} from 'antd';\nimport { withRouter } from \"react-router-dom\";\n\nexport class Select extends Component {\n    state = {\n        value: 1,\n      };\n\n    onChange = e => {\n        console.log('radio checked', e.target.value);\n        this.setState({\n            value: e.target.value,\n        });\n    };\n\n    handleSuccess = () => {\n        this.props.history.push(\"/success\")\n    }\n\n    render() {\n        const radioStyle = {\n            display: 'block',\n            height: '30px',\n            lineHeight: '30px',\n          };\n        const { value } = this.state;\n        return (\n            <div>\n                <p style={{display:'flex', justifyContent:'center'}}>เลือกบัญชี</p>\n                <Card style={{ border: '1px solid blue', display:'flex', justifyContent:'center' }}>\n                    <Radio.Group onChange={this.onChange} value={value}>\n                        <Radio style={radioStyle} value={1}>\n                        01234xxxx1111\n                        </Radio>\n                        <Radio style={radioStyle} value={2}>\n                        01234xxxx2222\n                        </Radio>\n                        <Radio style={radioStyle} value={3}>\n                        01234xxxx3333\n                        </Radio>\n                        <Radio style={radioStyle} value={4}>\n                        01234xxxx4444\n                        </Radio>\n                    </Radio.Group>  \n                    <div style={{display:'flex', justifyContent:'center'}}>\n                        <Button onClick={this.handleSuccess} type=\"primary\">ยืนยัน</Button>\n                    </div>\n                </Card>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Select)\n","import React, { Component } from 'react'\nimport Select from '../component/Select'\n\nexport class PSelect extends Component {\n    render() {\n        return (\n            <div>\n                <Select />\n            </div>\n        )\n    }\n}\n\nexport default PSelect\n","import React, { Component } from 'react'\nimport { Card, Button } from 'antd';\nimport { withRouter } from \"react-router-dom\";\n\nexport class Success extends Component {\n    handleBack = () => {\n        this.props.history.push(\"/\")\n    }\n    render() {\n        return (\n            <div>\n                <p style={{display:'flex', justifyContent:'center'}}>สำเร็จ</p>\n                <Card style={{ border: '1px solid green', display:'flex', justifyContent:'center' }}>\n                    <p>การลงทะเบียนของท่านเรียบร้อยเเล้ว</p>\n                    <div style={{display:'flex', justifyContent:'center'}}>\n                        <Button onClick={this.handleBack} type=\"primary\">กลับหน้าหลัก</Button>\n                    </div>\n                </Card>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Success)\n","import React, { Component } from 'react'\nimport Success from '../component/Success'\n\nexport class PSuccess extends Component {\n    render() {\n        return (\n            <div>\n                <Success />\n            </div>\n        )\n    }\n}\n\nexport default PSuccess\n","import React from 'react';\nimport './App.css';\nimport PageConsent from './pages/Consent'\nimport PageLogin from './pages/Login'\nimport PageSelect from './pages/Select'\nimport PageSuccess from './pages/Success'\nimport { HashRouter, Route } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <HashRouter basename=\"/\">\n      <Route exact path=\"/\" component={PageConsent} />\n        <Route path=\"/login\" component={PageLogin} />\n        <Route path=\"/select\" component={PageSelect} />\n        <Route path=\"/success\" component={PageSuccess} />\n      </HashRouter>    \n      </div>\n      \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nconst AppWithRouter = () => (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(<AppWithRouter />, document.getElementById('root'))\nserviceWorker.unregister();\n"],"sourceRoot":""}